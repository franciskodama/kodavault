generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  cid       String   @id
  name      String   @unique
  label     String   @unique
  icon      String?
  status    Boolean? @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  Event     Event[]
}

model Day {
  did         String    @id(map: "Day_pkey1") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime  @db.Date
  city        String?
  state       String?
  country     String?
  weather     String?
  moon        String?
  temperature Int?      @default(0)
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @db.Timestamptz(6)
  uid         String
  User        User      @relation(fields: [uid], references: [uid], onDelete: NoAction, onUpdate: NoAction)
}

model DayEvent {
  id        String   @id(map: "DayEvents_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dayId     String
  eventId   Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  value     String?
  uid       String
  User      User     @relation(fields: [uid], references: [uid], onDelete: NoAction, onUpdate: NoAction, map: "DayEvents_uid_fkey")
}

model Event {
  eid       String    @id(map: "Events_pkey") @default("eid-")
  icon      String?
  status    Boolean   @default(false)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @db.Timestamptz(6)
  name      String    @unique
  label     String
  cid       String?
  Category  Category? @relation(fields: [cid], references: [cid], onDelete: NoAction, onUpdate: NoAction, map: "Event_category_fkey")
}

model User {
  id           Int           @id @default(autoincrement())
  firstName    String?
  lastName     String?
  city         String?
  state        String?
  country      String?
  email        String?
  uid          String?       @unique
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime?     @default(now()) @db.Timestamptz(6)
  Day          Day[]
  DayEvent     DayEvent[]
  UserSettings UserSettings?
}

model UserSettings {
  uid         String    @unique
  periodStart DateTime? @db.Date
  period      String?
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @db.Timestamptz(6)
  view        Boolean   @default(true)
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User      @relation(fields: [uid], references: [uid], onDelete: NoAction, onUpdate: NoAction)
}

model applicant_tracking_system {
  id               BigInt  @id
  applicant_name   String?
  email            String?
  linkedin_url     String?
  phone_number     String?
  resume           String?
  job_position     String?
  application_date String?
  status           String?
  notes            String?
  photo            String?
}

model Asset {
  asset      String
  qty        Float                   @default(0)
  wallet     String
  type       String
  uid        String
  subtype    String
  currency   String
  account    String
  exchange   String?                 @default("null")
  created_at DateTime                @default(now()) @db.Timestamptz(6)
  id         String                  @id(map: "Asset_pkey1") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  purpose    purpose_enum_ceee32b0?  @default(Investment)
  category   category_enum_6c7fcd47? @default(Unknown)
  tag        String?
}

model CoinGoal {
  uid        String
  created_at DateTime                @default(now()) @db.Timestamptz(6)
  coin       String                  @unique
  goal       Float                   @default(0)
  obs        String?
  id         String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  priority   priority_enum_593899f8?
}

model Shortcut {
  created_at  DateTime                @default(now()) @db.Timestamptz(6)
  name        String
  uid         String
  url         String
  id          String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String                  @default("I am for...")
  category    category_enum_f421eb4b? @default(Miscellaneous)
  from        String
  color       color_enum_bd2ecc46?    @default(Gray)
}

model NetWorthEvolution {
  created_at DateTime @default(now()) @db.Date
  usd        Float    @default(0)
  cad        Float    @default(0)
  brl        Float    @default(0)
  btc        Float    @default(0)
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uid        String?
}

enum priority_enum_593899f8 {
  High
  Medium
  Low
}

enum category_enum_f421eb4b {
  Exchange
  Knowledge
  Course
  Analysis
  Indicator
  Miscellaneous
  Platform
  Video
  Friend
}

enum color_enum_bd2ecc46 {
  Blue
  Red
  Green
  Orange
  Black
  Gray
  Pink
}

enum purpose_enum_ceee32b0 {
  Investment
  Trade
}

enum category_enum_6c7fcd47 {
  AI
  Meme
  DeFi
  Oracles
  Stablecoins
  Gaming
  Infrastructure
  Data
  Interoperability
  Unknown
  Exchange
  Governance
  NFT
  Safehaven
  SmartContract
  Sports
  Media
  Privacy
  Identity
  SupplyChain
  RWA
}
